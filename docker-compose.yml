version: '3.9'
services:

  pg_db:
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./schema_design/Dockerfile
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "su postgres", "&&", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10


  django_app:
    restart: always
    volumes:
      - static_volume:/app/static
    command: gunicorn --bind :${DJANGO_APP_PORT} --workers ${GUNICORN_WORKERS} config.wsgi:application
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: movies_admin/Djangoapp.dockerfile
    depends_on:
      - pg_db
    expose:
      - ${DJANGO_APP_PORT}


# Review response (TODO: delete afterwards). В контейнер было добавлено
# профилирование (https://docs.docker.com/compose/profiles/). Для запуска
# сервиса с миграциями используется команда "docker-compose --profile init up"
# Для запуска сервиса без миграций: "docker-compose up". Профилирование
# позволяет не создавать несколько файлов compose.
  django_startapp:
    command: >
      sh -c "python manage.py migrate admin &&
             python manage.py migrate auth &&
             python manage.py migrate contenttypes &&
             python manage.py migrate sessions &&
             python manage.py migrate movies --fake &&
             python manage.py createsuperuser --noinput &&
             python load_data.py &&
             rm db.sqlite &&
             rm load_data.py"
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: movies_admin/Djangostartapp.dockerfile
    depends_on:
      pg_db:
        condition: service_healthy
    expose:
      - ${DJANGO_APP_PORT}
    profiles:
      - init


  nginx:
    restart: always
    volumes:
      - static_volume:/home/app/static
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - ${NGINX_PORT}:8080
    env_file:
      - ./.env
    depends_on:
      - django_app


volumes:
  static_volume:
  postgres_data: