version: '3'
services:

  pg_db:
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./schema_design/Dockerfile
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "su postgres", "&&", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10


  django_app:
    volumes:
      - static_volume:/app/static
    command: gunicorn --bind :${DJANGO_APP_PORT} --workers ${GUNICORN_WORKERS} config.wsgi:application
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./movies_admin/Dockerfile
    depends_on:
      - django_startapp
    expose:
      - ${DJANGO_APP_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl", "-f", "http://localhost:8000/admin"]
      interval: 5s
      timeout: 5s
      retries: 10


# Review response (TODO: delete afterwards). В рамках поставленной задачи
# мною реализован запуск приложения со всеми миграциями одной командой. Данный
# контейнер является техническим и выполняет процедуры пероначальной настройки
# Django, миграции данных из sqlite3 в postgres и создание суперпользователя.
# Поскольку данные процедуры выполняются лишь один раз, объединять с контейнером
# отвечающим за запуск только Django представляется неоптимальным решением.
# В дальнейшей работе может потребоваться просто запуск Django без миграций,
# представленный вариант эту задачу решает.
  django_startapp:
    volumes:
      - static_volume:/app/static
    command: >
      sh -c "python manage.py migrate admin &&
             python manage.py migrate auth &&
             python manage.py migrate contenttypes &&
             python manage.py migrate sessions &&
             python manage.py migrate movies --fake &&
             python manage.py createsuperuser --noinput &&
             python load_data.py &&
             rm db.sqlite &&
             rm load_data.py"
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./movies_admin/Dockerfile
    depends_on:
      pg_db:
        condition: service_healthy
    expose:
      - ${DJANGO_APP_PORT}


  nginx:
    volumes:
      - static_volume:/home/app/static
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    env_file:
      - ./.env
    depends_on:
      - django_app

# Review response (TODO: delete afterwards) К сожалению, стандартная команда
# для запуска nginx недостатачна в контексте генерации нужного конфига nginx.
# Данная команда из файла шаблона nginx.tmpl создает файл конфигурации nginx.conf,
# используя соответствующие значения переменных окружения из файла .env
# Подобное решение позволяет оперативно развертывать приложение на любом порту,
# без внесения изменений в файлы проекта.
    command: >
      sh -c "envsubst '$$NGINX_PORT $$DJANGO_APP_PORT' < /etc/nginx/conf.d/nginx.tmpl > /etc/nginx/conf.d/nginx.conf &&
             nginx -g 'daemon off;'"


volumes:
  static_volume:
  postgres_data: